<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2024-09-15" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2024-10-28" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2024-10-28" />
<meta name="version" content="1" />
<meta name="sectionTitle" content="../../title.svg" />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" sizes="all" />
<link rel="stylesheet" href="/inc/web-cat/page-structure/demo-page-1.css" />
<script type="module" src="/inc/web-cat/page-structure/demo-page-1.js" ></script>
 
<meta name="categories" content="JavaScript > Asynchronous Programming > Promises" />
<meta name="tags" content="JavaScript, Promise" />
<title>Promise Demo 1 (JavaScript > Asynchronous Programming > Promises)</title>
<meta name="description" content="Demonstrates how to create a promise." />

<style>
#messages > p { margin-top : 0 ; margin-bottom : 0 }
</style>
</head><body>
<div class="remove-if-hosted"><h1>Demo 1</h1>
</div>
<p><button id="startButton">Start</button></p>
<div id="messages"></div>
<script class="module">
function wait ( duration, number ) {
	function constructorCallback ( resolve, reject ) {
		function timeoutCallback ( ) {
			if ( duration <= 2000 ) resolve( `Promise ${number} succeeded after ${Math.round(duration)} milliseconds.` );
			else reject( `Promise ${number} failed, maximum runtime exceeded by ${Math.round(duration) - 2000} milliseconds.` );
			}
		setTimeout( timeoutCallback, duration );
		}
	return new Promise ( constructorCallback );
	}
function addMessage( msg ) { 
	const p = document.createElement( "P" );
	p.innerText = msg;
	messages.append( p );
	}
startButton.addEventListener( "click" , ( ) => {
	messages.innerHTML = "" ;
	for ( let i = 0 ; i < 10 ; i  ++ ) {
		const promise = wait( Math.random( ) * 4000, i );
		promise.then( message => addMessage( message ));
		promise.catch( reason => addMessage( reason ));
		promise.finally(( ) => addMessage( "Done!" ));
		}
	} ) ;
</script>
</body></html>