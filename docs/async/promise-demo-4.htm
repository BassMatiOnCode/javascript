<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
 
<title>Promise Demo 4</title>

</head><body style="margin-left:20px">

<p><button id="start">start</button> <button id="clear">Clear</button></p>
<div id="messages" style="border:1px solid silver;height:200px;overflow:auto"></div>

<script type="module">
const msgbox = document.getElementById( "messages" );
function pad( n, len ) { return n.toString().padStart( len, "0" ) }
function message( s ) {
	const d = new Date( );
	msgbox.innerHTML += `${ pad( d.getMinutes(), 2) }:${ pad( d.getSeconds(), 2) }.${ pad( d.getMilliseconds(), 3) }&emsp;\t${ s }<br/>` ;
	msgbox.scrollTo( 0, 999 );
	}
function delay( milliseconds ) {
	// Returns a promise that fulfills when the timeout 
	// callback function is executed.
	message( "Creating a delay promise." );
    let p = new Promise( (resolve) => { 
		message( "Promise constructor callback function running." );
		message( `Setting up a timeout of ${milliseconds} milliseconds.` );
        window.setTimeout( ( ) => {
			message( "Timout callback function started." ); 
            message( "Tick!" );
            resolve();
			message( "Timout callback function finished." ); 
			}, milliseconds ); // Second parameter of setTimeout defined the delay 
		message( "Promise constructor callback function finished." );
		} ) ;
	message( "Returning delay promise." );
	return p;
    }

document.getElementById( "start" )
	.addEventListener( "click", ( ) => {
		message( "Click event handler starting." );
		delay( 2000 )
			.then( () => message( "Promise fulfilled.<br/>" ));
		message( "Click event handler finished." );
		} ) ;

document.getElementById("clear").addEventListener( "click", ( ) => 
	msgbox.innerText = "" ) ;
</script>

</body></html>